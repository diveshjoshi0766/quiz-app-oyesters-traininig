{"version":3,"sources":["constants/actionTypes.js","components/Questions.js","components/Result.js","components/Quiz.js","App.js","serviceWorker.js","middleware.js","reducers/quiz.js","reducer.js","store.js","index.js"],"names":["ActionTypes","Questions","question","option","quiz","JSON","parse","stringify","this","props","questions","find","x","id","options","selected","onAnswer","slice","pager","index","size","className","name","map","q","count","htmlFor","checked","type","onChange","config","allowBack","onClick","move","Component","connect","state","mode","dispatch","payload","Result","forEach","isCorrect","every","isAnswer","disabled","Quiz","e","target","parseInt","onPagerUpdate","setMode","onSubmit","renderMode","App","quizId","setState","value","load","url","fetch","then","res","json","o","Object","assign","length","onQuizLoad","Boolean","window","location","hostname","match","promiseMiddleware","store","next","action","initialQuiz","combineReducers","console","log","createStore","reducer","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2f4d70d8.chunk.js","sourcesContent":["\r\nexport const ActionTypes = {\r\n    QuizLoad: 'QuizLoad',\r\n    QuizAnswer: 'QuizAnswer',\r\n    QuizSubmit: 'QuizSubmit',\r\n    PagerUpdate: 'PagerUpdate'\r\n}","import React, { Component } from 'react';\r\nimport { ActionTypes } from '../constants/actionTypes';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => ({ ...state.quiz, ...state.mode, ...state.pager });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAnswer: payload => dispatch({ type: ActionTypes.QuizAnswer, payload })\r\n});\r\n\r\nclass Questions extends Component {\r\n\r\n    onAnswer(question, option) {\r\n        let quiz = JSON.parse(JSON.stringify(this.props.quiz));\r\n        let q = quiz.questions.find(x => x.id === question.id);\r\n        q.options.find(x => x.id === option.id).selected = true;\r\n        this.props.onAnswer(quiz);\r\n    }\r\n\r\n    render() {\r\n        let questions = (this.props.quiz.questions) ?\r\n            this.props.quiz.questions.slice(this.props.pager.index, this.props.pager.index + this.props.pager.size) : [];\r\n        return (\r\n            <div id=\"quiz\">\r\n                <h2 className=\"text-center font-weight-normal\">{this.props.quiz.name}</h2>\r\n                <hr />\r\n                {questions.map(q =>\r\n                    <div key={q.id}>\r\n                        <div className=\"badge badge-info\">Question {this.props.pager.index + 1} of {this.props.pager.count}.</div>\r\n                        <h3 className=\"font-weight-normal\">{this.props.pager.index + 1}. <span>{q.name}</span></h3>\r\n                        <div className=\"row text-left options\">\r\n                            {\r\n                                q.options.map(option =>\r\n                                    <div key={option.id} className=\"col-6\">\r\n                                        <div className=\"option\">\r\n                                            <label className=\"font-weight-normal\" htmlFor={option.id}>\r\n                                                <input id={option.id} checked={option.selected} type=\"checkbox\" onChange={() => this.onAnswer(q, option)} />\r\n                                                {option.name}\r\n                                            </label>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n                <hr />\r\n                <div className=\"text-center\">\r\n                    {this.props.quiz.config.allowBack && <button id=\"prev\" className=\"btn btn-default\" onClick={this.props.move}>Prev</button>}\r\n                    <button id=\"next\" className=\"btn btn-primary\" onClick={this.props.move}>Next</button>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","import React from 'react';\r\n\r\nfunction Result(props) {\r\n    let questions = props.questions;\r\n    questions.forEach(q => { q.isCorrect = q.options.every(x => x.selected === x.isAnswer); })\r\n\r\n    return (\r\n        <div className=\"result\">\r\n            <h2 className=\"text-center font-weight-normal\">Quiz Result</h2>\r\n            {questions.map((q, index) =>\r\n                <div key={q.id} className={`mb-2 ${q.isCorrect ? 'bg-success' : 'bg-danger'}`}>\r\n                    <div className=\"result-question\">\r\n                        <h5>{index + 1}. {q.name}</h5>\r\n                        <div className=\"row\">\r\n                            {\r\n                                q.options.map(option =>\r\n                                    <div key={option.id} className=\"col-6\">\r\n                                        <input id={option.id} type=\"checkbox\" disabled=\"disabled\" checked={option.selected} /> {option.name}\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </div>\r\n                        <div className={`m-1 p-1 text-bold ${q.isCorrect ? 'text-success' : 'text-danger'}`}>Your answer is {q.isCorrect ? 'Correct' : 'Wrong'}.</div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <h4 className=\"alert alert-info text-center\">You may close this window now.</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\r\nimport { ActionTypes } from '../constants/actionTypes';\r\nimport Questions from './Questions';\r\nimport Result from './Result';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => { return { ...state.quiz, ...state.mode, ...state.pager } };\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: payload => dispatch({ type: ActionTypes.QuizSubmit, payload }),\r\n    onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\r\n});\r\n\r\nclass Quiz extends Component {\r\n    move = (e) => {\r\n        let id = e.target.id;\r\n        let index = 0;\r\n        if (id === 'first')\r\n            index = 0;\r\n        else if (id === 'prev')\r\n            index = this.props.pager.index - 1;\r\n        else if (id === 'next')\r\n            index = this.props.pager.index + 1;\r\n        else if (id === 'last')\r\n            index = this.props.pager.count - 1;\r\n        else\r\n            index = parseInt(e.target.id, 10);\r\n\r\n        if (index >= 0 && index < this.props.pager.count) {\r\n            let pager = {\r\n                index: index,\r\n                size: 1,\r\n                count: this.props.pager.count\r\n            };\r\n            this.props.onPagerUpdate(pager);\r\n        }\r\n    }\r\n\r\n    setMode = (e) => this.props.onSubmit(e.target.id);\r\n\r\n    renderMode() {\r\n        if (this.props.mode === 'quiz') {\r\n            return (<Questions move={this.move} />)\r\n        }else {\r\n            return (<Result questions={this.props.quiz.questions || []} />)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderMode()}\r\n                {(this.props.mode !== 'submit') &&\r\n                    <div>\r\n                        <hr />\r\n                        <button id=\"quiz\" className=\"btn btn-info\" onClick={this.setMode}>Quiz</button>\r\n                        <button id=\"submit\" className=\"btn btn-primary\" onClick={this.setMode}>Submit Quiz</button >\r\n                    </div >}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);","import React, { Component } from 'react';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport { connect } from 'react-redux';\nimport { ActionTypes } from './constants/actionTypes';\n\nconst mapStateToProps = state => { return { ...state.quiz } };\n\nconst mapDispatchToProps = dispatch => ({\n  onQuizLoad: payload => dispatch({ type: ActionTypes.QuizLoad, payload }),\n  onPagerUpdate: payload => dispatch({ type: ActionTypes.PagerUpdate, payload })\n});\n\nclass App extends Component {\n  state = {\n    quizId: 'data/javascript.json'\n  };\n\n  pager = {\n    index: 0,\n    size: 1,\n    count: 1\n  }\n\n  componentDidMount() {\n    this.load(this.state.quizId);\n  }\n\n  load(quizId) {\n    let url = quizId || this.props.quizId;\n    fetch(`../${url}`).then(res => res.json()).then(res => {\n      let quiz = res;\n      quiz.questions.forEach(q => {\n        q.options.forEach(o => o.selected = false);\n      });\n      quiz.config = Object.assign(this.props.quiz.config || {}, quiz.config);\n      this.pager.count = quiz.questions.length / this.pager.size;\n      this.props.onQuizLoad(quiz);\n      this.props.onPagerUpdate(this.pager);\n    });\n  }\n\n  onChange = (e) => {\n    this.setState({ quizId: e.target.value });\n    this.load(e.target.value);\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"p-2\">\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <h3>Quiz Application</h3>\n            </div>\n          </div>\n        </header>\n        <Quiz quiz={this.state.quiz} quizId={this.state.quizId} mode={this.state.mode} />\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import { } from './constants/actionTypes';\r\n\r\nconst promiseMiddleware = store => next => action => {\r\n    next(action);\r\n};\r\n\r\nexport { promiseMiddleware }","import {\r\n    ActionTypes\r\n} from '../constants/actionTypes';\r\n\r\nlet initialQuiz = {\r\n    quiz: {\r\n        config: {\r\n            'allowBack': true,\r\n            'allowReview': true,\r\n            'autoMove': false,  // if true, it will move to next question automatically when answered.\r\n            'duration': 0,  // indicates the time in which quiz needs to be completed. 0 means unlimited.\r\n            'pageSize': 1,\r\n            'requiredAll': false,  // indicates if you must answer all the questions before submitting.\r\n            'richText': false,\r\n            'shuffleQuestions': false,\r\n            'shuffleOptions': false,\r\n            'showClock': false,\r\n            'showPager': true,\r\n            'theme': 'none'\r\n        },\r\n        questions: []\r\n    },\r\n    mode: 'quiz',\r\n    pager: {\r\n        index: 0,\r\n        size: 1,\r\n        count: 1\r\n    }\r\n}\r\n\r\nexport default (state = { ...initialQuiz }, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.PagerUpdate:\r\n            return {\r\n                ...state, pager: action.payload, mode: 'quiz'\r\n            }\r\n        case ActionTypes.QuizLoad:\r\n            return {\r\n                ...state, quiz: action.payload\r\n            }\r\n        case ActionTypes.QuizSubmit:\r\n            console.log('quiz.js Submitted.');\r\n            return {\r\n                ...state, mode: action.payload\r\n            }\r\n        case ActionTypes.QuizAnswer:\r\n            console.log('quiz.js reducer Quiz Answer called.');\r\n            return {\r\n                ...state, quiz: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import quiz from './reducers/quiz';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport default combineReducers({\r\n  quiz\r\n});\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\r\nimport { promiseMiddleware } from './middleware';\r\nimport reducer from './reducer';\r\n\r\nconst getMiddleware = () => {\r\n    if (process.env.NODE_ENV === 'production') {\r\n        return applyMiddleware(promiseMiddleware);\r\n    } else {\r\n        return applyMiddleware(promiseMiddleware)\r\n    }\r\n};\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(getMiddleware()));","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}